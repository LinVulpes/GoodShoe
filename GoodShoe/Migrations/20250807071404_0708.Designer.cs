// <auto-generated />
using System;
using GoodShoe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoodShoe.Migrations
{
    [DbContext(typeof(GoodShoeDbContext))]
    [Migration("20250807071404_0708")]
    partial class _0708
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GoodShoe.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("SGD");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdminId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "SGD",
                            DOB = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@goodshoe.com",
                            Phone = "+65 1234 5678",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Admin User"
                        });
                });

            modelBuilder.Entity("GoodShoe.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GoodShoe.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GoodShoe.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("GoodShoe.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "456 Customer Road, Singapore",
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "+65 9876 5432",
                            UpdatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "789 Shopper Lane, Singapore",
                            CreatedAt = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@email.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Phone = "+65 8765 4321",
                            UpdatedAt = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GoodShoe.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Status");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Address = "456 Customer Road, Singapore",
                            CreatedAt = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            PaymentMethod = "Credit Card",
                            PaymentStatus = "Pending",
                            Status = "Pending",
                            TotalAmount = 409.00m,
                            UpdatedAt = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 2,
                            Address = "789 Shopper Lane, Singapore",
                            CreatedAt = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            PaymentMethod = "PayPal",
                            PaymentStatus = "Completed",
                            Status = "Shipped",
                            TotalAmount = 150.00m,
                            UpdatedAt = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 3,
                            Address = "456 Customer Road, Singapore",
                            CreatedAt = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            PaymentMethod = "Credit Card",
                            PaymentStatus = "Completed",
                            Status = "Delivered",
                            TotalAmount = 259.00m,
                            UpdatedAt = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GoodShoe.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductName = "Cloudsurfer Next",
                            ProductVariantId = 3,
                            Quantity = 1,
                            Size = 10,
                            TotalPrice = 259.00m,
                            UnitPrice = 259.00m
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductName = "Aero Burst",
                            ProductVariantId = 11,
                            Quantity = 1,
                            Size = 9,
                            TotalPrice = 150.00m,
                            UnitPrice = 150.00m
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 2,
                            ProductName = "Aero Burst",
                            ProductVariantId = 12,
                            Quantity = 1,
                            Size = 10,
                            TotalPrice = 150.00m,
                            UnitPrice = 150.00m
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 3,
                            ProductName = "Cloudsurfer Next",
                            ProductVariantId = 4,
                            Quantity = 1,
                            Size = 11,
                            TotalPrice = 259.00m,
                            UnitPrice = 259.00m
                        });
                });

            modelBuilder.Entity("GoodShoe.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "Puma",
                            Category = "Unisex",
                            Color = "White",
                            Description = "Lace up in Swiss-engineered runners with these Cloudsurfer Next trainers from On Running.",
                            ImageUrl = "/images/products/image1.png",
                            Name = "Cloudsurfer Next",
                            Price = 259.00m
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "Sketchers",
                            Category = "Women",
                            Color = "Periwinkle",
                            Description = "Hit every mile marker in long-distance confidence and premium cushioned comfort with Skechers Aero Burst™.",
                            ImageUrl = "/images/products/image2.png",
                            Name = "Aero Burst",
                            Price = 150.00m
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "GoodShoe",
                            Category = "Men",
                            Color = "Brown",
                            Description = "Men's Shoes",
                            ImageUrl = "/images/products/image3.png",
                            Name = "GoodShoe 0.1",
                            Price = 100.00m
                        },
                        new
                        {
                            ProductId = 4,
                            Brand = "GoodShoe",
                            Category = "Women",
                            Color = "Brown",
                            Description = "Updated Women's Shoes",
                            ImageUrl = "/images/products/image4.png",
                            Name = "GoodShoe 0.2",
                            Price = 120.00m
                        },
                        new
                        {
                            ProductId = 5,
                            Brand = "GoodShoe",
                            Category = "Unisex",
                            Color = "Blue",
                            Description = "New Unisex Shoes",
                            ImageUrl = "/images/products/image5.png",
                            Name = "GoodShoe 0.3",
                            Price = 110.00m
                        },
                        new
                        {
                            ProductId = 6,
                            Brand = "Nike",
                            Category = "Men",
                            Color = "White",
                            Description = "The Nike Air Max 270 delivers visible cushioning under every step.",
                            ImageUrl = "/images/products/image6.png",
                            Name = "Nike Max 260",
                            Price = 149.99m
                        });
                });

            modelBuilder.Entity("GoodShoe.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("StockCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "Size")
                        .IsUnique();

                    b.ToTable("ProductVariant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            Size = 8,
                            StockCount = 3
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1,
                            Size = 9,
                            StockCount = 3
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 1,
                            Size = 10,
                            StockCount = 3
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 1,
                            Size = 11,
                            StockCount = 3
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 1,
                            Size = 12,
                            StockCount = 3
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 1,
                            Size = 13,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 1,
                            Size = 14,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 1,
                            Size = 15,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 1,
                            Size = 16,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 2,
                            Size = 8,
                            StockCount = 7
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 2,
                            Size = 9,
                            StockCount = 7
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 2,
                            Size = 10,
                            StockCount = 7
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 2,
                            Size = 11,
                            StockCount = 7
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 2,
                            Size = 12,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 2,
                            Size = 13,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 16,
                            ProductId = 2,
                            Size = 14,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 17,
                            ProductId = 2,
                            Size = 15,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 18,
                            ProductId = 2,
                            Size = 16,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 19,
                            ProductId = 3,
                            Size = 8,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 20,
                            ProductId = 3,
                            Size = 9,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 21,
                            ProductId = 3,
                            Size = 10,
                            StockCount = 5
                        },
                        new
                        {
                            Id = 22,
                            ProductId = 3,
                            Size = 11,
                            StockCount = 5
                        },
                        new
                        {
                            Id = 23,
                            ProductId = 3,
                            Size = 12,
                            StockCount = 5
                        },
                        new
                        {
                            Id = 24,
                            ProductId = 3,
                            Size = 13,
                            StockCount = 5
                        },
                        new
                        {
                            Id = 25,
                            ProductId = 3,
                            Size = 14,
                            StockCount = 5
                        },
                        new
                        {
                            Id = 26,
                            ProductId = 3,
                            Size = 15,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 27,
                            ProductId = 3,
                            Size = 16,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 28,
                            ProductId = 4,
                            Size = 8,
                            StockCount = 8
                        },
                        new
                        {
                            Id = 29,
                            ProductId = 4,
                            Size = 9,
                            StockCount = 8
                        },
                        new
                        {
                            Id = 30,
                            ProductId = 4,
                            Size = 10,
                            StockCount = 8
                        },
                        new
                        {
                            Id = 31,
                            ProductId = 4,
                            Size = 11,
                            StockCount = 8
                        },
                        new
                        {
                            Id = 32,
                            ProductId = 4,
                            Size = 12,
                            StockCount = 8
                        },
                        new
                        {
                            Id = 33,
                            ProductId = 4,
                            Size = 13,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 34,
                            ProductId = 4,
                            Size = 14,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 35,
                            ProductId = 4,
                            Size = 15,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 36,
                            ProductId = 4,
                            Size = 16,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 37,
                            ProductId = 5,
                            Size = 8,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 38,
                            ProductId = 5,
                            Size = 9,
                            StockCount = 6
                        },
                        new
                        {
                            Id = 39,
                            ProductId = 5,
                            Size = 10,
                            StockCount = 6
                        },
                        new
                        {
                            Id = 40,
                            ProductId = 5,
                            Size = 11,
                            StockCount = 6
                        },
                        new
                        {
                            Id = 41,
                            ProductId = 5,
                            Size = 12,
                            StockCount = 6
                        },
                        new
                        {
                            Id = 42,
                            ProductId = 5,
                            Size = 13,
                            StockCount = 6
                        },
                        new
                        {
                            Id = 43,
                            ProductId = 5,
                            Size = 14,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 44,
                            ProductId = 5,
                            Size = 15,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 45,
                            ProductId = 5,
                            Size = 16,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 46,
                            ProductId = 6,
                            Size = 8,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 47,
                            ProductId = 6,
                            Size = 9,
                            StockCount = 0
                        },
                        new
                        {
                            Id = 48,
                            ProductId = 6,
                            Size = 10,
                            StockCount = 15
                        },
                        new
                        {
                            Id = 49,
                            ProductId = 6,
                            Size = 11,
                            StockCount = 15
                        },
                        new
                        {
                            Id = 50,
                            ProductId = 6,
                            Size = 12,
                            StockCount = 15
                        },
                        new
                        {
                            Id = 51,
                            ProductId = 6,
                            Size = 13,
                            StockCount = 15
                        },
                        new
                        {
                            Id = 52,
                            ProductId = 6,
                            Size = 14,
                            StockCount = 15
                        },
                        new
                        {
                            Id = 53,
                            ProductId = 6,
                            Size = 15,
                            StockCount = 15
                        },
                        new
                        {
                            Id = 54,
                            ProductId = 6,
                            Size = 16,
                            StockCount = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GoodShoe.Models.Cart", b =>
                {
                    b.HasOne("GoodShoe.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GoodShoe.Models.CartItem", b =>
                {
                    b.HasOne("GoodShoe.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodShoe.Models.ProductVariant", "ProductVariant")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("GoodShoe.Models.Order", b =>
                {
                    b.HasOne("GoodShoe.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GoodShoe.Models.OrderItem", b =>
                {
                    b.HasOne("GoodShoe.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodShoe.Models.ProductVariant", "ProductVariant")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("GoodShoe.Models.ProductVariant", b =>
                {
                    b.HasOne("GoodShoe.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GoodShoe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GoodShoe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodShoe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GoodShoe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoodShoe.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("GoodShoe.Models.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GoodShoe.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("GoodShoe.Models.Product", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("GoodShoe.Models.ProductVariant", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
